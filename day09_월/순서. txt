=========================================================== 1교시 ===========================================================
[ 교재 ] : 486 ~ 493
    - 대략 20분 
    - 시간이 남으면 되새김 문제 미리 풀기 ( P.506 )

[ 웹 프로그래밍 언어]
    - HTML : 하이퍼텍스트 마크업 언어      = 뼈대
    - CSS : 캐스케이드 스타일 시트 언어    = 옷     -->  HTML 없이 독단적으로 실행 불가능 
    - JS : 자바 스크립트 언어             = 행동    --> HTML 없이 독단적으로 실행 불가능 
        HTML( CSS포함 , JS 포함 )

[ JS ]
    - 2009년 이후 node.js 나오면서 백엔드 역할 가능해졌다. 인기 상승
    1. 웹 프로그래밍( HTML,CSS,JS )
    2. 웹 서버( node.js )
    3. 앱 ( REACT.JS NATIVE )
    4. 소프트웨어 ( NW.JS )
        ---> 스타트업 ( 소규모 프로젝트 )

[ JS 적용하는 방법 ]
    1. <body> 마크업 안에서 <script> 마크업 사용
        <script>
            JS코드 작성 
        </script>
    
    2. * JS파일 생성하여 HTML 에서 임포트(불러오기) 사용
        <head> 마크업 안에서 <script src="JS파일경로" >
        <script src="파일경로"></script>

[ JS 주석 ]
    1. /* 여러줄 주석 */
    2. // 한줄 주석 

=========================================================== 2교시 ===========================================================

데이터 (Data)
    정의: 데이터는 아직 특별한 의미를 부여하지 않은, 사실이나 값을 그대로 나타낸 객관적인 자료입니다. 숫자, 글자, 이미지, 소리 등 모든 것이 데이터가 될 수 있습니다.
    목적: 데이터는 그 자체로는 큰 의미가 없지만, 분석하고 가공하여 의미 있는 '정보(Information)'를 만들기 위한 원재료로 사용됩니다. 의사결정, 예측, 새로운 사실 발견 등의 기초가 됩니다.
    생활 속 사용처:
    신체검사 결과: 키, 몸무게, 시력 등의 측정값은 데이터입니다. 이 데이터를 분석하여 '건강 상태'라는 정보를 얻습니다.
    교통량: 특정 시간대에 도로를 지나간 자동차의 수는 데이터입니다. 이 데이터를 모아 '교통 체증 구간'이나 '최적 경로' 정보를 만듭니다.
    온라인 쇼핑 기록: 우리가 구매한 상품 목록, 가격, 구매 시간 등은 데이터입니다. 쇼핑몰은 이 데이터를 분석하여 '추천 상품'을 보여주는 정보를 생성합니다.

리터럴 (Literal)
    정의: 리터럴은 프로그래밍 코드에서 개발자가 직접 입력한 고정된 값 그 자체를 의미합니다. 변수에 저장되기 전의 원본 데이터 값이라고 생각할 수 있습니다.
    목적: 컴퓨터 프로그램에 구체적인 값을 직접 전달하기 위해 사용됩니다. 변수의 초기값을 설정하거나, 조건문을 만들거나, 함수에 값을 넘겨주는 등 코드의 구체적인 작동을 위해 필수적입니다.
    생활 속 사용처: 리터럴은 코드 속 개념이지만, 일상에서는 다음과 같이 비유할 수 있습니다.
    레시피의 재료량: 요리 레시피에 적힌 "설탕 2스푼"에서 '2'는 리터럴처럼 고정된 값입니다.
    주소: 친구에게 "A아파트 101동 502호로 와"라고 말할 때, '101'이나 '502'는 변하지 않는 고정된 값, 즉 리터럴과 같습니다.
    약속 시간: "오후 3시에 만나자"고 약속할 때, '3'이라는 숫자는 그 약속의 구체적인 값을 나타내는 리터럴과 유사합니다.

자료형(Data Type)은 컴퓨터에게 값의 종류를 알려줘 올바른 처리를 돕는 이름표입니다. ( 분리수거 예시. )

숫자형 (Number) 🔢
    정의: 10, 0, -55, 3.14와 같은 모든 숫자를 나타냅니다.
    목적: 덧셈, 뺄셈 등의 수학적 계산이나 값의 크기를 비교하기 위해 사용됩니다.
    생활 속 사용처: 물건의 가격, 건물의 층수, 내 나이나 키를 표현할 때 사용됩니다.
문자열 (String) 🔤
    정의: "안녕하세요", "대한민국", "A"와 같이 따옴표(" " 또는 ' ')로 묶인 모든 글자를 의미합니다.
    목적: 화면에 정보를 표시하거나 사용자로부터 텍스트를 입력받는 등 글자를 다룰 때 사용됩니다.
    생활 속 사용처: 누군가의 이름, 책의 제목, 살고 있는 곳의 주소 등이 해당됩니다.
불리언 (Boolean) ✅
    정의: true (참) 와 false (거짓), 단 두 가지 값만 가지는 유형입니다.
    목적: 프로그램이 특정 조건을 확인하고 판단해야 할 때 사용됩니다. '로그인 되었는가?', '데이터 로딩이 완료되었는가?' 등의 상태를 나타냅니다.
    생활 속 사용처: 전등의 스위치(켜짐/꺼짐), 출석부의 출석 여부(출석/결석), 잠금장치의 상태(잠김/열림)와 같습니다.
undefined 🤔
    정의: 변수는 만들어졌지만, 아직 어떤 값도 할당되지 않은 상태를 의미합니다.
    목적: 시스템이 자동으로 "아직 값이 정해지지 않았음"을 나타낼 때 사용됩니다.
    생활 속 사용처: 선물을 주기 위해 빈 상자는 준비했지만, 아직 무슨 선물을 넣을지 결정하지 못한 상태와 같습니다.
null 텅빔
    정의: "값이 존재하지 않음"을 개발자가 의도적으로 명시한 값입니다.
    목적: 변수 안에 들어있던 값을 비우거나, 값이 없음을 의도적으로 표현하고 싶을 때 사용됩니다.
    생활 속 사용처: 선물을 주려고 상자를 준비했다가, 주지 않기로 결정하고 상자 안에 "내용물 없음" 이라는 쪽지를 넣어둔 상태와 같습니다.
배열 (Array) 🗄️
    정의: 순서가 있는 여러 개의 값을 하나의 변수 안에 목록처럼 보관하는 자료형입니다. 대괄호 [ ] 안에 값들을 넣어 만듭니다. 각 값은 자신만의 '순서 번호(index)'를 가지며, 이 번호는 0부터 시작합니다.
    목적: 여러 개의 데이터를 순서대로 관리하고 싶을 때 사용합니다. 예를 들어, 랭킹, 할 일 목록, 월별 데이터 등을 순서에 따라 저장하고 꺼내 쓰기 편리합니다.
    생활 속 사용처:
        쇼핑 목록: ["사과", "우유", "계란", "휴지"] (순서는 중요하지 않을 수 있지만, 하나의 목록으로 관리)
        달리기 경주 순위: ["김철수", "이영희", "박민준"] (0번이 1등, 1번이 2등...)
        아파트의 층: 1층, 2층, 3층... 순서대로 각 층에 누가 사는지 목록으로 관리하는 것과 같습니다.
객체 (Object) 📇
    정의: 순서 대신 '이름(Key)'과 '값(Value)'이 한 쌍을 이루는 데이터를 여러 개 담는 자료형입니다. 중괄호 { }를 사용해 만듭니다. 각 값은 고유한 이름을 가지고 있어서, 순서와 상관없이 이름으로 값을 바로 찾을 수 있습니다.
    목적: 하나의 대상에 대한 다양한 속성(정보)을 묶어서 관리하고 싶을 때 사용합니다. 예를 들어, '사람' 한 명의 이름, 나이, 직업 등을 하나의 덩어리로 표현할 때 매우 유용합니다.
    생활 속 사용처:
        사전: '사과'라는 이름(Key)을 찾으면 '둥글고 빨간 과일'이라는 설명(Value)이 나오는 것과 같습니다.
        스마트폰 정보: '모델명', '제조사', '출시일' 등 다양한 정보가 이름표와 함께 하나의 묶음으로 정리된 것과 같습니다.

[ 리터럴 ]
    - 키보드로부터 직접 입력한 값 그 자체
    - 데이터/자료 그 자체 뜻 ,  10 , "김" , 'a' , 3.14 , true 
    - 각 프로그래밍 언어들이 미리 정의해두고 동일한 데이터/자료를 참조 하는 방법 
    - 메모리(저장소) 효율성 극대화 하기 위해서 
    - 예]
        let 변수1 = 10
        let 변수2 = 10  ---> 변수1 와 변수2 는 같은 값/자료 를 참조한다.

[ JS 의 데이터 기본 타입 ]
    1. 문자열(String)  : " " 또는 ' ' 또는 ``(백틱-키보드TAB) 으로 감싼 자료 
        10 vs "10" : 자료는 10 같다. 자료의타입은 다르다.
        예] '안녕하세요' , "유재석" , `<div> </div>`
    2. 숫자(Number) 
        예] 10 , 7 , 3.14
    3. 불리언(Boolean)
        예] true 또는 false

1. 교재 : 512

=========================================================== 3교시 ===========================================================
[ 데이터를 출력하는 방법 ]
    1. console.log(): 
    2. alert(): 
    3. document.write()
    4. document.body.innerHTML = 


실습1 : 키오스크 에서의 각 자료형(숫자,문자열,불리언,배열)별 2개 이상씩 데이터 찾아서 , console.log() 함수를 이용하여 출력하시오

=========================================================== 4교시 ===========================================================

교재 : p.508
    - https://www.playsw.or.kr/software/view/bbc/612?currentTab=software_begin&show=all

[ 변수 ]
    - 하나의 자료/데이터를 저장하는 메모리 공간 
    1. 변수 만들기 
        let 변수명 = 리터럴 
    2. 변수의 값 호출 
        변수명 
    3. 변수의 값 수정 
        변수명 = 새로운값
    4. 변수의 연산 
        let 변수명A = 변수명B + 10
    5. 변수의 초기화 , 변수가 생성될때 처음에 대입되는 행위/작업
        1. let 변수명 = 리터럴; 
        2. let 변수명;          <---- undefined(값이 없다.)
        
=========================================================== 5교시 ===========================================================
[ 데이터를 입력하는 방법 ]
    1. 교재 : 494
[ 문자열 관련 함수 ]
[ 배열 관련 함수 ]
=========================================================== 6교시 ===========================================================
실습2 : 키오스크 에서의 변수와상수 찾기